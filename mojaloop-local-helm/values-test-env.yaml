global:
  config:
    db_password: KWvT8pzuBQ63Qp
    forensicloggingsidecar_disabled: true
mojaloop:
  account-lookup-service:
    account-lookup-service:
      affinity: {}
      config:
        central_services_host: $release_name-centralledger-service
        central_services_port: 80
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: account_lookup
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-account-lookup-mysql
        db_idle_timeout_millis: 30000
        db_password: KWvT8pzuBQ63Qp
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: account_lookup
        display_routes: true
        end_point_cache:
          expiresIn: 180000
          generateTimeout: 30000
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        log_level: info
        run_migrations: false
      containers:
        admin:
          image:
            command: '["node", "src/index.js", "server", "--admin"]'
            pullPolicy: Always
            repository: mojaloop/account-lookup-service
            tag: v8.7.0
          service:
            ports:
              api:
                name: http-admin
                port: 4001
        api:
          image:
            command: '["node", "src/index.js", "server", "--api"]'
            pullPolicy: Always
            repository: mojaloop/account-lookup-service
            tag: v8.7.0
          service:
            ports:
              api:
                name: http-api
                port: 4002
      enabled: true
      fullnameOverride: ""
      global:
        config:
          affinity: {}
          db_password: KWvT8pzuBQ63Qp
          forensicloggingsidecar_disabled: true
          nodeSelector: {}
          tolerations: []
      ingress:
        annotations: {}
        enabled: true
        hosts:
        - account-lookup-service.mbox-dev.io
        path: /
        tls: []
      init:
        enabled: true
        mysql:
          command: until mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database   -e
            'select * from oracleEndpoint;' ; do echo waiting for MySQL; sleep 2;
            done;
          enabled: true
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: account-lookup-service
          prefix: moja_
          timeout: 5000
        enabled: true
      mysql:
        enabled: true
        mysqlPassword: KWvT8pzuBQ63Qp
        mysqlRootPassword: rUxHfAd7en
      nameOverride: ""
      nodeSelector: {}
      replicaCount: 1
      resources: {}
      service:
        port: 80
        type: ClusterIP
      tolerations: []
    account-lookup-service-admin:
      affinity: {}
      config:
        central_services_host: $release_name-centralledger-service
        central_services_port: 80
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: account_lookup
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-account-lookup-mysql
        db_idle_timeout_millis: 30000
        db_password: KWvT8pzuBQ63Qp
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: account_lookup
        display_routes: true
        end_point_cache:
          expiresIn: 180000
          generateTimeout: 30000
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        log_level: info
        run_migrations: false
      containers:
        admin:
          image:
            command: '["node", "src/index.js", "server", "--admin"]'
            pullPolicy: Always
            repository: mojaloop/account-lookup-service
            tag: v8.7.0
          service:
            ports:
              api:
                name: http-admin
                port: 4001
        api:
          image:
            command: '["node", "src/index.js", "server", "--api"]'
            pullPolicy: Always
            repository: mojaloop/account-lookup-service
            tag: v8.7.0
          service:
            ports:
              api:
                name: http-api
                port: 4002
      enabled: true
      fullnameOverride: ""
      global:
        config:
          affinity: {}
          db_password: KWvT8pzuBQ63Qp
          forensicloggingsidecar_disabled: true
          nodeSelector: {}
          tolerations: []
      ingress:
        annotations: {}
        enabled: true
        hosts:
        - account-lookup-service-admin.mbox-dev.io
        path: /
        tls: []
      init:
        enabled: true
        migration:
          command: npm run migrate
          enabled: true
          name: run-migration
        mysql:
          command: until mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database   -e
            'select version()' ; do echo waiting for MySQL; sleep 2; done;
          enabled: true
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: account-lookup-service-admin
          prefix: moja_
          timeout: 5000
        enabled: true
      nameOverride: ""
      nodeSelector: {}
      replicaCount: 1
      resources: {}
      service:
        port: 80
        type: ClusterIP
      tolerations: []
    als-oracle-pathfinder:
      config:
        db_database:
          account_lookup: account_lookup
          central_ledger: central_ledger
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_password: oyMxgZChuu
        db_port: "3306"
        db_type: mysql
        db_user: central_ledger
        log_level: info
        pathfinder:
          host: 10.0.0.1
          port: 7007
          queryTimeoutMs: 10000
          tls:
            certs:
              client_cert: |-
                -----BEGIN CERTIFICATE-----
                MIIDejCCAmICCQClh6JWji+/NjANBgkqhkiG9w0BAQsFADB/MQswCQYDVQQGEwJV
                UzEQMA4GA1UECAwHQWxhYmFtYTETMBEGA1UEBwwKTW9udGdvbWVyeTENMAsGA1UE
                CgwEVGVzdDENMAsGA1UECwwEVGVzdDENMAsGA1UEAwwEVGVzdDEcMBoGCSqGSIb3
                DQEJARYNdGVzdEB0ZXN0LmNvbTAeFw0xOTEwMjkxNTMwNTFaFw0yOTEwMjYxNTMw
                NTFaMH8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdBbGFiYW1hMRMwEQYDVQQHDApN
                b250Z29tZXJ5MQ0wCwYDVQQKDARUZXN0MQ0wCwYDVQQLDARUZXN0MQ0wCwYDVQQD
                DARUZXN0MRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMIIBIjANBgkqhkiG
                9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4MU4ipis7vrhsJl6Ad0hIF/nEGjTPG/6KliG
                E1eaAVxOc/Pgw43quKjt846Aqwd9YoMp2NAx74xvZ4OnbMwSpjDQGRQbMY7Hiubs
                UiJMqrst6S5AQqPHJoaErknVjRov0NyAUjia3HThtkqrRT52xTnTGYwc49zt+BKo
                G4iurv40hfOTe4b7g3A64CVNEZe7t+qPbAIew9MU1X3OD3D0hzKZ8MstqebLbSPV
                IflnzU+8Acg4mrMvSdf6OOveUUbf7r4QmfC9AerNVia/GcAvbG/GU+WEOnJfp+8X
                Av+gfS0aM2pUbdrXLi/NxWnvw6bh8e+pjbBcli8roWmroRbFPwIDAQABMA0GCSqG
                SIb3DQEBCwUAA4IBAQApH4oz7CWXzor91aU7bcdD5Ec/Z5QNDKXVrBcF5r+g83yz
                bBphZrvDq+wOVigQ/JfmuAzRtK05WIpvxd22kvsKrDoViG9B+x+wDQm0tP0vY1Cp
                EChdJLE1tAktRL49r8pzpOaUU7NrhYLP1tWrDDsCC3fPUwZzx9quem0xSYmC0BpT
                Ug+hxw3uH7bsGhQkQnGrAoEwrsyq8M3lbw0pIUvq2S7t8lpHZvM5Ldkp5DM7SlJg
                gBabAqScAeoqssFv4bsWINawn/7JvmFEb4kwep6pIf9Lh/rkCgsgyq2xEh/9LXNs
                eCgyt9zbdU2HwsWnoOUEJ0Z4157ykgOkECCGErKl
                -----END CERTIFICATE-----
              client_key: |-
                -----BEGIN PRIVATE KEY-----
                MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDgxTiKmKzu+uGw
                mXoB3SEgX+cQaNM8b/oqWIYTV5oBXE5z8+DDjeq4qO3zjoCrB31igynY0DHvjG9n
                g6dszBKmMNAZFBsxjseK5uxSIkyquy3pLkBCo8cmhoSuSdWNGi/Q3IBSOJrcdOG2
                SqtFPnbFOdMZjBzj3O34EqgbiK6u/jSF85N7hvuDcDrgJU0Rl7u36o9sAh7D0xTV
                fc4PcPSHMpnwyy2p5sttI9Uh+WfNT7wByDiasy9J1/o4695RRt/uvhCZ8L0B6s1W
                Jr8ZwC9sb8ZT5YQ6cl+n7xcC/6B9LRozalRt2tcuL83Fae/DpuHx76mNsFyWLyuh
                aauhFsU/AgMBAAECggEAWgPhvu+h4hsrI1Rznid2ysZdfR7d6chWgXruRvTAQmc7
                LAixLN+67rUIho+9S8E2H6uzqJbISM0PGH+LH3Eiztehn0mEEnbBxwjv/3ypA37u
                xgG1znpUmUMqA7qiAV5JY/XKliMBMeTFOAHzUUnQuu+LcSHBuCeUTdL66/vzKTT4
                oCKwB1vcnzfL5NS/7ownAgLsjNj3pgORRAY9sTDzUkjwrrN/m5nEfghycAcyXHDJ
                lQprc0xX4TI/Vd9ZkG+khAznkRaXiPJ1P1TwadgK5m53Imt2H3F0lmrhNCrul/l7
                F0Uf2tfNHHgSjyoGQkPryuqyf2NcMiUY1d4uCsnWEQKBgQDziD3gBkjguQZUc3Yb
                DqiCtaLkavndmRTPaAyUk95dUuiVEMhnDm8L7T+03PhVDjtXdy4PQUm61xr/Kw4J
                1VUArbIjzcs+OEGNvq99stThRBvszwNRSWS4kYIur3+ggddrewtL7s+hiAqeK88L
                n6vG4/eSKWJBQwF1001siKf7/QKBgQDsRxXGZkf+yVsuL/hSiadwRdD/OJ1O7gr2
                j8za6izaUX1anXLdPrvtOkdCgEC0Iy6hY0FMi0GWzklpY4SvZuxXlK6QkKB3SCE9
                E8RuOSFLouuaxgiau8MnAEUTkInTC+9foOa8znuOGC0JmzztlFf7P7CF8PoNTb4n
                x4a9dQSE6wKBgAjPfgWT1KEksIDvqG80KY6JCbqf0ChfOGyEhCf/7YSM0lNKRyXL
                VOMmky507BsPp7/zVNxCbWtwCs7+fMSITkn2/sHi2R6IJH7/ThQLGz6HG0eG+cTA
                Ff/Da+VKfiCNcgC2c+MsYaCjblbomNX/0dQhPTyxeJeJ2AyuN1fc3c71AoGBAIA2
                tsc5e3nz9AmlOEA5uGWBTT8hjqNlIwfW0pg8mOhDbh188PbD8yBxDng0tmfJ66Ti
                Am4x5v6ZpFaPDVJNLJT99pg2Ew2HU5ocHuydDcdIekc7jTHCD80bJWDPfyrKADRJ
                UMxF0+AwmEftOGvHotKRJg4YzOfpNvXJHQGz/SbPAoGAALJa010eqPHuZKQxpW4z
                4dpt1Fr16cbLnmIk16zxnvPbPJeCtEx8IkwgLIWP6zPOESIGBTslGMq6xIgYaOXZ
                G8S+fLF3J9sfE2gCJR1JSBXdlyWmcKJdyvhRt168hxVW1N4uHJ2KBA3vUhC/kRvh
                3XDCWsEkXqU0KRzt+TkWVOQ=
                -----END PRIVATE KEY-----
              pathfinder_cert: |-
                -----BEGIN CERTIFICATE-----
                MIIDejCCAmICCQClh6JWji+/NjANBgkqhkiG9w0BAQsFADB/MQswCQYDVQQGEwJV
                UzEQMA4GA1UECAwHQWxhYmFtYTETMBEGA1UEBwwKTW9udGdvbWVyeTENMAsGA1UE
                CgwEVGVzdDENMAsGA1UECwwEVGVzdDENMAsGA1UEAwwEVGVzdDEcMBoGCSqGSIb3
                DQEJARYNdGVzdEB0ZXN0LmNvbTAeFw0xOTEwMjkxNTMwNTFaFw0yOTEwMjYxNTMw
                NTFaMH8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdBbGFiYW1hMRMwEQYDVQQHDApN
                b250Z29tZXJ5MQ0wCwYDVQQKDARUZXN0MQ0wCwYDVQQLDARUZXN0MQ0wCwYDVQQD
                DARUZXN0MRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMIIBIjANBgkqhkiG
                9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4MU4ipis7vrhsJl6Ad0hIF/nEGjTPG/6KliG
                E1eaAVxOc/Pgw43quKjt846Aqwd9YoMp2NAx74xvZ4OnbMwSpjDQGRQbMY7Hiubs
                UiJMqrst6S5AQqPHJoaErknVjRov0NyAUjia3HThtkqrRT52xTnTGYwc49zt+BKo
                G4iurv40hfOTe4b7g3A64CVNEZe7t+qPbAIew9MU1X3OD3D0hzKZ8MstqebLbSPV
                IflnzU+8Acg4mrMvSdf6OOveUUbf7r4QmfC9AerNVia/GcAvbG/GU+WEOnJfp+8X
                Av+gfS0aM2pUbdrXLi/NxWnvw6bh8e+pjbBcli8roWmroRbFPwIDAQABMA0GCSqG
                SIb3DQEBCwUAA4IBAQApH4oz7CWXzor91aU7bcdD5Ec/Z5QNDKXVrBcF5r+g83yz
                bBphZrvDq+wOVigQ/JfmuAzRtK05WIpvxd22kvsKrDoViG9B+x+wDQm0tP0vY1Cp
                EChdJLE1tAktRL49r8pzpOaUU7NrhYLP1tWrDDsCC3fPUwZzx9quem0xSYmC0BpT
                Ug+hxw3uH7bsGhQkQnGrAoEwrsyq8M3lbw0pIUvq2S7t8lpHZvM5Ldkp5DM7SlJg
                gBabAqScAeoqssFv4bsWINawn/7JvmFEb4kwep6pIf9Lh/rkCgsgyq2xEh/9LXNs
                eCgyt9zbdU2HwsWnoOUEJ0Z4157ykgOkECCGErKl
                -----END CERTIFICATE-----
              pathfinder_intermediate_cert: |-
                -----BEGIN CERTIFICATE-----
                MIIDejCCAmICCQClh6JWji+/NjANBgkqhkiG9w0BAQsFADB/MQswCQYDVQQGEwJV
                UzEQMA4GA1UECAwHQWxhYmFtYTETMBEGA1UEBwwKTW9udGdvbWVyeTENMAsGA1UE
                CgwEVGVzdDENMAsGA1UECwwEVGVzdDENMAsGA1UEAwwEVGVzdDEcMBoGCSqGSIb3
                DQEJARYNdGVzdEB0ZXN0LmNvbTAeFw0xOTEwMjkxNTMwNTFaFw0yOTEwMjYxNTMw
                NTFaMH8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdBbGFiYW1hMRMwEQYDVQQHDApN
                b250Z29tZXJ5MQ0wCwYDVQQKDARUZXN0MQ0wCwYDVQQLDARUZXN0MQ0wCwYDVQQD
                DARUZXN0MRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMIIBIjANBgkqhkiG
                9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4MU4ipis7vrhsJl6Ad0hIF/nEGjTPG/6KliG
                E1eaAVxOc/Pgw43quKjt846Aqwd9YoMp2NAx74xvZ4OnbMwSpjDQGRQbMY7Hiubs
                UiJMqrst6S5AQqPHJoaErknVjRov0NyAUjia3HThtkqrRT52xTnTGYwc49zt+BKo
                G4iurv40hfOTe4b7g3A64CVNEZe7t+qPbAIew9MU1X3OD3D0hzKZ8MstqebLbSPV
                IflnzU+8Acg4mrMvSdf6OOveUUbf7r4QmfC9AerNVia/GcAvbG/GU+WEOnJfp+8X
                Av+gfS0aM2pUbdrXLi/NxWnvw6bh8e+pjbBcli8roWmroRbFPwIDAQABMA0GCSqG
                SIb3DQEBCwUAA4IBAQApH4oz7CWXzor91aU7bcdD5Ec/Z5QNDKXVrBcF5r+g83yz
                bBphZrvDq+wOVigQ/JfmuAzRtK05WIpvxd22kvsKrDoViG9B+x+wDQm0tP0vY1Cp
                EChdJLE1tAktRL49r8pzpOaUU7NrhYLP1tWrDDsCC3fPUwZzx9quem0xSYmC0BpT
                Ug+hxw3uH7bsGhQkQnGrAoEwrsyq8M3lbw0pIUvq2S7t8lpHZvM5Ldkp5DM7SlJg
                gBabAqScAeoqssFv4bsWINawn/7JvmFEb4kwep6pIf9Lh/rkCgsgyq2xEh/9LXNs
                eCgyt9zbdU2HwsWnoOUEJ0Z4157ykgOkECCGErKl
                -----END CERTIFICATE-----
            client_cert_path: /opt/als-oracle-pathfinder/secrets/client_cert.pem
            client_key_path: /opt/als-oracle-pathfinder/secrets/client_key.pem
            intermediate_cert_path: /opt/als-oracle-pathfinder/secrets/pathfinder_intermediate_cert.pem
            rejectUnauthorized: false
            root_cert_path: /opt/als-oracle-pathfinder/secrets/pathfinder_cert.pem
      enabled: false
      image:
        command: '["node", "src/index.js"]'
        imagePullSecrets:
          name: dock-casa-secret
        pullPolicy: Always
        repository: mojaloop/als-oracle-pathfinder
        tag: v8.3.0
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath: /
        hosts:
          api: als-oracle-pathfinder.local
      init:
        enabled: true
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
      livenessProbe:
        enabled: false
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15
      readinessProbe:
        enabled: false
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            provisioning:
              externalPort: 3000
              name: http-api
        ports:
          api:
            externalPort: 80
            internalPort: 3000
            name: http-api
        type: ClusterIP
    global:
      config:
        affinity: {}
        db_password: KWvT8pzuBQ63Qp
        forensicloggingsidecar_disabled: true
        nodeSelector: {}
        tolerations: []
    mysql:
      allowRootFrom: '%'
      configFiles:
        node.cnf: |
          [mysqld]
          datadir=/var/lib/mysql
          default_storage_engine=InnoDB
          binlog_format=ROW
          innodb_flush_log_at_trx_commit  = 0
          innodb_flush_method             = O_DIRECT
          innodb_file_per_table           = 1
          innodb_autoinc_lock_mode=2
          bind_address = 0.0.0.0
          wsrep_slave_threads=2
          wsrep_cluster_address=gcomm://
          wsrep_provider=/usr/lib/galera3/libgalera_smm.so
          wsrep_cluster_name=galera
          wsrep_sst_method=xtrabackup-v2
          pxc_strict_mode=DISABLED
          max_connections=999
          max_user_connections=994
          thread_cache_size=999
      enabled: true
      global:
        config:
          affinity: {}
          db_password: KWvT8pzuBQ63Qp
          forensicloggingsidecar_disabled: true
          nodeSelector: {}
          tolerations: []
      image:
        pullPolicy: Always
        repository: percona/percona-xtradb-cluster
        tag: 5.7.19
      logTail: true
      metricsExporter:
        argsOverrides: []
        commandOverrides: []
        enabled: true
        tag: v0.11.0
      mysqlDatabase: account_lookup
      mysqlPassword: KWvT8pzuBQ63Qp
      mysqlRootPassword: rUxHfAd7en
      mysqlUser: account_lookup
      nameOverride: account-lookup-mysql
      nodeSelector: {}
      persistence:
        accessMode: ReadWriteOnce
        enabled: false
        size: 8Gi
      podAnnotations: {}
      podDisruptionBudget:
        enabled: false
        maxUnavailable: 1
      prometheus:
        operator:
          enabled: false
          prometheusRule:
            enabled: true
            labels: {}
          serviceMonitor:
            interval: 10s
      replicas: 1
      service:
        externalIPs: []
        percona:
          headless: false
        port: 3306
        type: ClusterIP
      ssl:
        enabled: false
        secret: mysql-ssl-certs
      tolerations: []
  central:
    centraleventprocessor:
      config:
        PORT: 3080
        central_ledger_admin_host: $release_name-centralledger-service
        central_ledger_admin_port: 80
        hub_participant:
          name: hub
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
        mongo_database: mojaloop
        mongo_host: $release_name-mongodb
        mongo_password: password
        mongo_port: 27017
        mongo_user: mojaloop
      global:
        config:
          affinity: {}
          db_password: KWvT8pzuBQ63Qp
          forensicloggingsidecar_disabled: true
          nodeSelector: {}
          tolerations: []
      image:
        pullPolicy: Always
        repository: mojaloop/central-event-processor
        tag: v8.6.0
      ingress:
        enabled: true
        externalPath: /
        hosts:
          api: central-event-processor.mbox-dev.io
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mongodb:
          command: mongo mongodb://$mongo_host:$mongo_port --eval "db.adminCommand('ping')"
          name: wait-for-mongodb
          pullPolicy: Always
          repository: bitnami/mongodb
          tag: latest
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 30
        periodSeconds: 15
      mongodb:
        additionalLabels: {}
        affinity: {}
        clusterDomain: cluster.local
        configmap: null
        enabled: true
        global:
          config:
            affinity: {}
            db_password: KWvT8pzuBQ63Qp
            forensicloggingsidecar_disabled: true
            nodeSelector: {}
            tolerations: []
        image:
          pullPolicy: Always
          registry: docker.io
          repository: bitnami/mongodb
          tag: 4.0.3
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        metrics:
          enabled: false
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: forekshub/percona-mongodb-exporter
            tag: latest
          podAnnotations:
            prometheus.io/port: "9216"
            prometheus.io/scrape: "true"
          serviceMonitor:
            additionalLabels: {}
            alerting:
              additionalLabels: {}
              rules: {}
            enabled: false
        mongodbDatabase: mojaloop
        mongodbEnableIPv6: true
        mongodbExtraFlags: []
        mongodbPassword: password
        mongodbRootPassword: adminpass
        mongodbUsername: mojaloop
        nameOverride: mongodb
        nodeSelector: {}
        persistence:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          enabled: false
          size: 8Gi
        podAnnotations: {}
        podLabels: {}
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replicaSet:
          enabled: false
          name: rs0
          pdb:
            minAvailable:
              arbiter: 1
              primary: 1
              secondary: 1
          replicas:
            arbiter: 1
            secondary: 1
          useHostnames: true
        resources: {}
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
        service:
          annotations: {}
          port: 27017
          type: ClusterIP
        tolerations: []
        usePassword: true
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 30
        periodSeconds: 15
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3080
              name: central-event-processor
        externalPort: 80
        internalPort: 3080
        name: central-event-processor
        type: ClusterIP
    centralledger:
      centralledger-handler-admin-transfer:
        config:
          db_acquire_timeout_millis: 30000
          db_connection_pool_max: 30
          db_connection_pool_min: 10
          db_create_retry_interval_millis: 200
          db_create_timeout_millis: 30000
          db_database: central_ledger
          db_debug: false
          db_destroy_timeout_millis: 5000
          db_driver: mysql
          db_host: $release_name-centralledger-mysql
          db_idle_timeout_millis: 30000
          db_password: KWvT8pzuBQ63Qp
          db_port: 3306
          db_reap_interval_millis: 1000
          db_type: mysql
          db_user: central_ledger
          error_handling:
            include_cause_extension: false
            truncate_extensions: true
          event_trace_state_enabled: true
          event_trace_vendor: mojaloop
          forensicloggingsidecar_disabled: true
          forensicloggingsidecar_host: forensicloggingsidecar-ledger
          forensicloggingsidecar_port: 5678
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_events_locally_enabled: false
          log_level: info
          objstore_disabled: true
          objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
        containers:
          api:
            image:
              command: '["node", "src/handlers/index.js", "handler", "--admin"]'
              pullPolicy: Always
              repository: mojaloop/central-ledger
              tag: v8.7.1
            livenessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            readinessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            service:
              ports:
                api:
                  externalPort: 80
                  internalPort: 3001
                  name: http-api
        enabled: true
        global:
          config:
            affinity: {}
            db_password: KWvT8pzuBQ63Qp
            forensicloggingsidecar_disabled: true
            nodeSelector: {}
            tolerations: []
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: true
          externalPath:
            api: /
          hosts:
            api: central-ledger-admin-transfer.mbox-dev.io
          type: http
        init:
          enabled: true
          kafka:
            command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
              do echo waiting for Kafka; sleep 2; done;
            env: {}
            name: wait-for-kafka
            pullPolicy: Always
            repository: solsson/kafka
            tag: latest
          mysql:
            command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
              -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
              && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
              fi; do echo waiting for MySQL; sleep 2; done;
            name: wait-for-mysql
            pullPolicy: Always
            repository: mysql
            tag: latest
          psql:
            name: wait-for-postgres
            pullPolicy: Always
            repository: bowerswilkins/awaitpostgres
            tag: latest
        metrics:
          config:
            defaultLabels:
              serviceName: central-handler-admin-transfer
            prefix: moja_
            timeout: 5000
          enabled: false
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 3001
                name: http-api
          type: ClusterIP
        sidecar:
          config:
            event_logger_grpc_host: localhost
            event_logger_grpc_port: 50051
            log_level: info
          enabled: false
          image:
            command: '["npm", "run", "start"]'
            pullPolicy: Always
            repository: mojaloop/event-sidecar
            tag: v8.7.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            internalPort: 4001
      centralledger-handler-timeout:
        config:
          db_acquire_timeout_millis: 30000
          db_connection_pool_max: 30
          db_connection_pool_min: 10
          db_create_retry_interval_millis: 200
          db_create_timeout_millis: 30000
          db_database: central_ledger
          db_debug: false
          db_destroy_timeout_millis: 5000
          db_driver: mysql
          db_host: $release_name-centralledger-mysql
          db_idle_timeout_millis: 30000
          db_password: KWvT8pzuBQ63Qp
          db_port: 3306
          db_reap_interval_millis: 1000
          db_type: mysql
          db_user: central_ledger
          error_handling:
            include_cause_extension: false
            truncate_extensions: true
          event_trace_state_enabled: true
          event_trace_vendor: mojaloop
          forensicloggingsidecar_disabled: true
          forensicloggingsidecar_host: forensicloggingsidecar-ledger
          forensicloggingsidecar_port: 5678
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_events_locally_enabled: false
          log_level: info
          objstore_disabled: true
          objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
        containers:
          api:
            image:
              command: '["node", "src/handlers/index.js", "handler", "--timeout"]'
              pullPolicy: Always
              repository: mojaloop/central-ledger
              tag: v8.7.1
            livenessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            readinessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            service:
              ports:
                api:
                  externalPort: 80
                  internalPort: 3001
                  name: http-api
        enabled: true
        global:
          config:
            affinity: {}
            db_password: KWvT8pzuBQ63Qp
            forensicloggingsidecar_disabled: true
            nodeSelector: {}
            tolerations: []
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: true
          externalPath:
            api: /
          hosts:
            api: central-ledger-timeout.mbox-dev.io
          type: http
        init:
          enabled: true
          kafka:
            command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
              do echo waiting for Kafka; sleep 2; done;
            env: {}
            name: wait-for-kafka
            pullPolicy: Always
            repository: solsson/kafka
            tag: latest
          mysql:
            command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
              -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
              && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
              fi; do echo waiting for MySQL; sleep 2; done;
            name: wait-for-mysql
            pullPolicy: Always
            repository: mysql
            tag: latest
          psql:
            name: wait-for-postgres
            pullPolicy: Always
            repository: bowerswilkins/awaitpostgres
            tag: latest
        metrics:
          config:
            defaultLabels:
              serviceName: central-handler-timeout
            prefix: moja_
            timeout: 5000
          enabled: false
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 3001
                name: http-api
          type: ClusterIP
        sidecar:
          config:
            event_logger_grpc_host: localhost
            event_logger_grpc_port: 50051
            log_level: info
          enabled: true
          image:
            command: '["npm", "run", "start"]'
            pullPolicy: Always
            repository: mojaloop/event-sidecar
            tag: v8.7.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            internalPort: 4001
      centralledger-handler-transfer-fulfil:
        config:
          db_acquire_timeout_millis: 30000
          db_connection_pool_max: 30
          db_connection_pool_min: 10
          db_create_retry_interval_millis: 200
          db_create_timeout_millis: 30000
          db_database: central_ledger
          db_debug: false
          db_destroy_timeout_millis: 5000
          db_driver: mysql
          db_host: $release_name-centralledger-mysql
          db_idle_timeout_millis: 30000
          db_password: KWvT8pzuBQ63Qp
          db_port: 3306
          db_reap_interval_millis: 1000
          db_type: mysql
          db_user: central_ledger
          error_handling:
            include_cause_extension: false
            truncate_extensions: true
          event_trace_state_enabled: true
          event_trace_vendor: mojaloop
          forensicloggingsidecar_disabled: true
          forensicloggingsidecar_host: forensicloggingsidecar-ledger
          forensicloggingsidecar_port: 5678
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_events_locally_enabled: false
          log_level: info
          objstore_disabled: true
          objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
        containers:
          api:
            image:
              command: '["node", "src/handlers/index.js", "handler", "--fulfil"]'
              pullPolicy: Always
              repository: mojaloop/central-ledger
              tag: v8.7.1
            livenessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            readinessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            service:
              ports:
                api:
                  externalPort: 80
                  internalPort: 3001
                  name: http-api
        enabled: true
        global:
          config:
            affinity: {}
            db_password: KWvT8pzuBQ63Qp
            forensicloggingsidecar_disabled: true
            nodeSelector: {}
            tolerations: []
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: true
          externalPath:
            api: /
          hosts:
            api: central-ledger-transfer-fulfil.mbox-dev.io
          type: http
        init:
          enabled: true
          kafka:
            command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
              do echo waiting for Kafka; sleep 2; done;
            env: {}
            name: wait-for-kafka
            pullPolicy: Always
            repository: solsson/kafka
            tag: latest
          mysql:
            command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
              -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
              && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
              fi; do echo waiting for MySQL; sleep 2; done;
            name: wait-for-mysql
            pullPolicy: Always
            repository: mysql
            tag: latest
          psql:
            name: wait-for-postgres
            pullPolicy: Always
            repository: bowerswilkins/awaitpostgres
            tag: latest
        metrics:
          config:
            defaultLabels:
              serviceName: central-handler-fulfil
            prefix: moja_
            timeout: 5000
          enabled: true
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 3001
                name: http-api
          type: ClusterIP
        sidecar:
          config:
            event_logger_grpc_host: localhost
            event_logger_grpc_port: 50051
            log_level: info
          enabled: true
          image:
            command: '["npm", "run", "start"]'
            pullPolicy: Always
            repository: mojaloop/event-sidecar
            tag: v8.7.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            internalPort: 4001
      centralledger-handler-transfer-get:
        config:
          db_acquire_timeout_millis: 30000
          db_connection_pool_max: 30
          db_connection_pool_min: 10
          db_create_retry_interval_millis: 200
          db_create_timeout_millis: 30000
          db_database: central_ledger
          db_debug: false
          db_destroy_timeout_millis: 5000
          db_driver: mysql
          db_host: $release_name-centralledger-mysql
          db_idle_timeout_millis: 30000
          db_password: KWvT8pzuBQ63Qp
          db_port: 3306
          db_reap_interval_millis: 1000
          db_type: mysql
          db_user: central_ledger
          error_handling:
            include_cause_extension: false
            truncate_extensions: true
          event_trace_state_enabled: true
          event_trace_vendor: mojaloop
          forensicloggingsidecar_disabled: true
          forensicloggingsidecar_host: forensicloggingsidecar-ledger
          forensicloggingsidecar_port: 5678
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_events_locally_enabled: false
          log_level: info
          objstore_disabled: true
          objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
        containers:
          api:
            image:
              command: '["node", "src/handlers/index.js", "handler", "--get"]'
              pullPolicy: Always
              repository: mojaloop/central-ledger
              tag: v8.7.1
            livenessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            readinessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            service:
              ports:
                api:
                  externalPort: 80
                  internalPort: 3001
                  name: http-api
        enabled: true
        global:
          config:
            affinity: {}
            db_password: KWvT8pzuBQ63Qp
            forensicloggingsidecar_disabled: true
            nodeSelector: {}
            tolerations: []
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: true
          externalPath:
            api: /
          hosts:
            api: central-ledger-transfer-get.mbox-dev.io
          type: http
        init:
          enabled: true
          kafka:
            command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
              do echo waiting for Kafka; sleep 2; done;
            env: {}
            name: wait-for-kafka
            pullPolicy: Always
            repository: solsson/kafka
            tag: latest
          mysql:
            command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
              -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
              && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
              fi; do echo waiting for MySQL; sleep 2; done;
            name: wait-for-mysql
            pullPolicy: Always
            repository: mysql
            tag: latest
          psql:
            name: wait-for-postgres
            pullPolicy: Always
            repository: bowerswilkins/awaitpostgres
            tag: latest
        metrics:
          config:
            defaultLabels:
              serviceName: central-handler-get
            prefix: moja_
            timeout: 5000
          enabled: false
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 3001
                name: http-api
          type: ClusterIP
        sidecar:
          config:
            event_logger_grpc_host: localhost
            event_logger_grpc_port: 50051
            log_level: info
          enabled: false
          image:
            command: '["npm", "run", "start"]'
            pullPolicy: Always
            repository: mojaloop/event-sidecar
            tag: v8.7.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            internalPort: 4001
      centralledger-handler-transfer-position:
        config:
          db_acquire_timeout_millis: 30000
          db_connection_pool_max: 30
          db_connection_pool_min: 10
          db_create_retry_interval_millis: 200
          db_create_timeout_millis: 30000
          db_database: central_ledger
          db_debug: false
          db_destroy_timeout_millis: 5000
          db_driver: mysql
          db_host: $release_name-centralledger-mysql
          db_idle_timeout_millis: 30000
          db_password: KWvT8pzuBQ63Qp
          db_port: 3306
          db_reap_interval_millis: 1000
          db_type: mysql
          db_user: central_ledger
          error_handling:
            include_cause_extension: false
            truncate_extensions: true
          event_trace_state_enabled: true
          event_trace_vendor: mojaloop
          forensicloggingsidecar_disabled: true
          forensicloggingsidecar_host: forensicloggingsidecar-ledger
          forensicloggingsidecar_port: 5678
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_events_locally_enabled: false
          log_level: info
          objstore_disabled: true
          objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
        containers:
          api:
            image:
              command: '["node", "src/handlers/index.js", "handler", "--position"]'
              pullPolicy: Always
              repository: mojaloop/central-ledger
              tag: v8.7.1
            livenessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            readinessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            service:
              ports:
                api:
                  externalPort: 80
                  internalPort: 3001
                  name: http-api
        enabled: true
        global:
          config:
            affinity: {}
            db_password: KWvT8pzuBQ63Qp
            forensicloggingsidecar_disabled: true
            nodeSelector: {}
            tolerations: []
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: true
          externalPath:
            api: /
          hosts:
            api: central-ledger-transfer-position.mbox-dev.io
          type: http
        init:
          enabled: true
          kafka:
            command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
              do echo waiting for Kafka; sleep 2; done;
            env: {}
            name: wait-for-kafka
            pullPolicy: Always
            repository: solsson/kafka
            tag: latest
          mysql:
            command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
              -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
              && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
              fi; do echo waiting for MySQL; sleep 2; done;
            name: wait-for-mysql
            pullPolicy: Always
            repository: mysql
            tag: latest
          psql:
            name: wait-for-postgres
            pullPolicy: Always
            repository: bowerswilkins/awaitpostgres
            tag: latest
        metrics:
          config:
            defaultLabels:
              serviceName: central-handler-position
            prefix: moja_
            timeout: 5000
          enabled: true
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 3001
                name: http-api
          type: ClusterIP
        sidecar:
          config:
            event_logger_grpc_host: localhost
            event_logger_grpc_port: 50051
            log_level: info
          enabled: true
          image:
            command: '["npm", "run", "start"]'
            pullPolicy: Always
            repository: mojaloop/event-sidecar
            tag: v8.7.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            internalPort: 4001
      centralledger-handler-transfer-prepare:
        config:
          db_acquire_timeout_millis: 30000
          db_connection_pool_max: 30
          db_connection_pool_min: 10
          db_create_retry_interval_millis: 200
          db_create_timeout_millis: 30000
          db_database: central_ledger
          db_debug: false
          db_destroy_timeout_millis: 5000
          db_driver: mysql
          db_host: $release_name-centralledger-mysql
          db_idle_timeout_millis: 30000
          db_password: KWvT8pzuBQ63Qp
          db_port: 3306
          db_reap_interval_millis: 1000
          db_type: mysql
          db_user: central_ledger
          error_handling:
            include_cause_extension: false
            truncate_extensions: true
          event_trace_state_enabled: true
          event_trace_vendor: mojaloop
          forensicloggingsidecar_disabled: true
          forensicloggingsidecar_host: forensicloggingsidecar-ledger
          forensicloggingsidecar_port: 5678
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_events_locally_enabled: false
          log_level: info
          objstore_disabled: true
          objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
        containers:
          api:
            image:
              command: '["node", "src/handlers/index.js", "handler", "--prepare"]'
              pullPolicy: Always
              repository: mojaloop/central-ledger
              tag: v8.7.1
            livenessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            readinessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            service:
              ports:
                api:
                  externalPort: 80
                  internalPort: 3001
                  name: http-api
        enabled: true
        global:
          config:
            affinity: {}
            db_password: KWvT8pzuBQ63Qp
            forensicloggingsidecar_disabled: true
            nodeSelector: {}
            tolerations: []
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: true
          externalPath:
            api: /
          hosts:
            api: central-ledger-transfer-prepare.mbox-dev.io
          type: http
        init:
          enabled: true
          kafka:
            command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
              do echo waiting for Kafka; sleep 2; done;
            env: {}
            name: wait-for-kafka
            pullPolicy: Always
            repository: solsson/kafka
            tag: latest
          mysql:
            command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
              -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
              && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
              fi; do echo waiting for MySQL; sleep 2; done;
            name: wait-for-mysql
            pullPolicy: Always
            repository: mysql
            tag: latest
          psql:
            name: wait-for-postgres
            pullPolicy: Always
            repository: bowerswilkins/awaitpostgres
            tag: latest
        metrics:
          config:
            defaultLabels:
              serviceName: central-handler-prepare
            prefix: moja_
            timeout: 5000
          enabled: true
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 3001
                name: http-api
          type: ClusterIP
        sidecar:
          config:
            event_logger_grpc_host: localhost
            event_logger_grpc_port: 50051
            log_level: info
          enabled: true
          image:
            command: '["npm", "run", "start"]'
            pullPolicy: Always
            repository: mojaloop/event-sidecar
            tag: v8.7.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            internalPort: 4001
      centralledger-service:
        config:
          db_acquire_timeout_millis: 30000
          db_connection_pool_max: 30
          db_connection_pool_min: 10
          db_create_retry_interval_millis: 200
          db_create_timeout_millis: 30000
          db_database: central_ledger
          db_debug: false
          db_destroy_timeout_millis: 5000
          db_driver: mysql
          db_host: $release_name-centralledger-mysql
          db_idle_timeout_millis: 30000
          db_password: KWvT8pzuBQ63Qp
          db_port: 3306
          db_reap_interval_millis: 1000
          db_type: mysql
          db_user: central_ledger
          error_handling:
            include_cause_extension: false
            truncate_extensions: true
          event_trace_state_enabled: true
          event_trace_vendor: mojaloop
          forensicloggingsidecar_disabled: true
          forensicloggingsidecar_host: forensicloggingsidecar-ledger
          forensicloggingsidecar_port: 5678
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_events_locally_enabled: false
          log_level: info
          objstore_disabled: true
          objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
        containers:
          api:
            image:
              command: '["node", "src/api/index.js"]'
              pullPolicy: Always
              repository: mojaloop/central-ledger
              tag: v8.7.1
            livenessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            readinessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            service:
              ports:
                api:
                  externalPort: 80
                  internalPort: 3001
                  name: http-api
        enabled: true
        global:
          config:
            affinity: {}
            db_password: KWvT8pzuBQ63Qp
            forensicloggingsidecar_disabled: true
            nodeSelector: {}
            tolerations: []
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: true
          externalPath:
            api: /admin(/|$)(.*)
          hosts:
            admin: interop-switch.mbox-dev.io
            api: interop-switch.mbox-dev.io
          metadata:
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /v1/$2
          type: http
        init:
          enabled: true
          migration:
            command: npm run migrate
            config:
              run_data_migration: true
            enabled: true
            name: run-migration
          mysql:
            command: until mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database   -e
              'select version()' ; do echo waiting for MySQL; sleep 2; done;
            name: wait-for-mysql
            pullPolicy: Always
            repository: mysql
            tag: latest
          psql:
            name: wait-for-postgres
            pullPolicy: Always
            repository: bowerswilkins/awaitpostgres
            tag: latest
        metrics:
          config:
            defaultLabels:
              serviceName: central-service
            prefix: moja_
            timeout: 5000
          enabled: true
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 3001
                name: http-api
          type: ClusterIP
        sidecar:
          config:
            event_logger_grpc_host: localhost
            event_logger_grpc_port: 50051
            log_level: info
          enabled: false
          image:
            command: '["npm", "run", "start"]'
            pullPolicy: Always
            repository: mojaloop/event-sidecar
            tag: v8.7.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            internalPort: 4001
      enabled: true
      global:
        config:
          affinity: {}
          db_password: KWvT8pzuBQ63Qp
          forensicloggingsidecar_disabled: true
          nodeSelector: {}
          tolerations: []
      kafka:
        additionalPorts: {}
        affinity: {}
        configJob:
          backoffLimit: 6
        configurationOverrides:
          confluent.support.metrics.enable: false
          default.replication.factor: 1
          offsets.topic.replication.factor: 1
        enabled: true
        envOverrides: {}
        external:
          distinct: false
          dns:
            useExternal: true
            useInternal: false
          domain: cluster.local
          enabled: false
          firstListenerPort: 31090
          init:
            image: lwolf/kubectl_deployer
            imagePullPolicy: IfNotPresent
            imageTag: "0.4"
          loadBalancerIP: []
          servicePort: 19092
          type: NodePort
        global:
          config:
            affinity: {}
            db_password: KWvT8pzuBQ63Qp
            forensicloggingsidecar_disabled: true
            nodeSelector: {}
            tolerations: []
        headless:
          port: 9092
        image: confluentinc/cp-kafka
        imagePullPolicy: IfNotPresent
        imageTag: 5.0.1
        jmx:
          configMap:
            enabled: true
            overrideConfig: {}
            overrideName: ""
          port: 5555
          whitelistObjectNames:
          - kafka.controller:*
          - kafka.server:*
          - java.lang:*
          - kafka.network:*
          - kafka.log:*
        kafkaHeapOptions: -Xmx1G -Xms1G
        logSubPath: logs
        nameOverride: kafka
        nodeSelector: {}
        persistence:
          enabled: true
          mountPath: /opt/kafka/data
          size: 1Gi
          storageClass: slow
        podAnnotations: {}
        podManagementPolicy: OrderedReady
        prometheus:
          jmx:
            enabled: true
            image: solsson/kafka-prometheus-jmx-exporter@sha256
            imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
            interval: 10s
            port: 5556
            resources: {}
            scrapeTimeout: 10s
          kafka:
            affinity: {}
            enabled: true
            image: danielqsj/kafka-exporter
            imageTag: v1.0.1
            interval: 10s
            nodeSelector: {}
            port: 9308
            resources: {}
            scrapeTimeout: 10s
            tolerations: []
          operator:
            enabled: false
            serviceMonitor:
              namespace: monitoring
              selector:
                prometheus: kube-prometheus
        rbac:
          enabled: true
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replicas: 1
        resources: {}
        terminationGracePeriodSeconds: 60
        tolerations: []
        topics: []
        updateStrategy:
          type: OnDelete
        zookeeper:
          affinity: {}
          enabled: true
          env:
            JMXAUTH: "false"
            JMXDISABLE: "false"
            JMXPORT: 1099
            JMXSSL: "false"
            ZK_CLIENT_PORT: 2181
            ZK_ELECTION_PORT: 3888
            ZK_HEAP_SIZE: 1G
            ZK_INIT_LIMIT: 5
            ZK_LOG_LEVEL: INFO
            ZK_MAX_CLIENT_CNXNS: 60
            ZK_MAX_SESSION_TIMEOUT: 40000
            ZK_MIN_SESSION_TIMEOUT: 4000
            ZK_PURGE_INTERVAL: 0
            ZK_SERVER_PORT: 2888
            ZK_SNAP_RETAIN_COUNT: 3
            ZK_SYNC_LIMIT: 10
            ZK_TICK_TIME: 2000
          exporters:
            jmx:
              config:
                lowercaseOutputName: false
                rules:
                - name: zookeeper_$2
                  pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+)><>(\w+)
                - labels:
                    replicaId: $2
                  name: zookeeper_$3
                  pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                    name1=replica.(\d+)><>(\w+)
                - labels:
                    memberType: $3
                    replicaId: $2
                  name: zookeeper_$4
                  pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                    name1=replica.(\d+), name2=(\w+)><>(\w+)
                - labels:
                    memberType: $3
                    replicaId: $2
                  name: zookeeper_$4_$5
                  pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                    name1=replica.(\d+), name2=(\w+), name3=(\w+)><>(\w+)
                startDelaySeconds: 30
              enabled: false
              env: {}
              image:
                pullPolicy: IfNotPresent
                repository: sscaling/jmx-prometheus-exporter
                tag: 0.3.0
              livenessProbe:
                failureThreshold: 8
                httpGet:
                  path: /metrics
                  port: jmxxp
                initialDelaySeconds: 30
                periodSeconds: 15
                successThreshold: 1
                timeoutSeconds: 60
              path: /metrics
              ports:
                jmxxp:
                  containerPort: 9404
                  protocol: TCP
              readinessProbe:
                failureThreshold: 8
                httpGet:
                  path: /metrics
                  port: jmxxp
                initialDelaySeconds: 30
                periodSeconds: 15
                successThreshold: 1
                timeoutSeconds: 60
              resources: {}
            zookeeper:
              config:
                logLevel: info
                resetOnScrape: "true"
              enabled: false
              env: {}
              image:
                pullPolicy: IfNotPresent
                repository: josdotso/zookeeper-exporter
                tag: v1.1.2
              livenessProbe:
                failureThreshold: 8
                httpGet:
                  path: /metrics
                  port: zookeeperxp
                initialDelaySeconds: 30
                periodSeconds: 15
                successThreshold: 1
                timeoutSeconds: 60
              path: /metrics
              ports:
                zookeeperxp:
                  containerPort: 9141
                  protocol: TCP
              readinessProbe:
                failureThreshold: 8
                httpGet:
                  path: /metrics
                  port: zookeeperxp
                initialDelaySeconds: 30
                periodSeconds: 15
                successThreshold: 1
                timeoutSeconds: 60
              resources: {}
          global:
            config:
              affinity: {}
              db_password: KWvT8pzuBQ63Qp
              forensicloggingsidecar_disabled: true
              nodeSelector: {}
              tolerations: []
          headless:
            annotations: {}
          heap: 1G
          image:
            PullPolicy: IfNotPresent
            pullPolicy: IfNotPresent
            repository: gcr.io/google_samples/k8szk
            tag: v3
          imagePullPolicy: IfNotPresent
          jobs:
            chroots:
              activeDeadlineSeconds: 300
              backoffLimit: 5
              completions: 1
              config:
                create: []
              enabled: false
              env: []
              parallelism: 1
              resources: {}
              restartPolicy: Never
          livenessProbe:
            exec:
              command:
              - zkOk.sh
            initialDelaySeconds: 20
          nodeSelector: {}
          persistence:
            accessMode: ReadWriteOnce
            enabled: false
            size: 5Gi
          podAnnotations: {}
          podDisruptionBudget:
            maxUnavailable: 1
          podLabels: {}
          port: 2181
          ports:
            client:
              containerPort: 2181
              protocol: TCP
            election:
              containerPort: 3888
              protocol: TCP
            server:
              containerPort: 2888
              protocol: TCP
          priorityClassName: ""
          readinessProbe:
            exec:
              command:
              - zkOk.sh
            initialDelaySeconds: 20
          replicaCount: 1
          resources: {}
          securityContext:
            fsGroup: 1000
            runAsUser: 1000
          service:
            annotations: {}
            ports:
              client:
                port: 2181
                protocol: TCP
                targetPort: client
            type: ClusterIP
          terminationGracePeriodSeconds: 1800
          tolerations: []
          updateStrategy:
            type: OnDelete
          url: ""
      mysql:
        allowRootFrom: '%'
        configFiles:
          node.cnf: |
            [mysqld]
            datadir=/var/lib/mysql
            default_storage_engine=InnoDB
            binlog_format=ROW
            innodb_flush_log_at_trx_commit  = 0
            innodb_flush_method             = O_DIRECT
            innodb_file_per_table           = 1
            innodb_autoinc_lock_mode=2
            bind_address = 0.0.0.0
            wsrep_slave_threads=2
            wsrep_cluster_address=gcomm://
            wsrep_provider=/usr/lib/galera3/libgalera_smm.so
            wsrep_cluster_name=galera
            wsrep_sst_method=xtrabackup-v2
            pxc_strict_mode=DISABLED
        enabled: true
        global:
          config:
            affinity: {}
            db_password: KWvT8pzuBQ63Qp
            forensicloggingsidecar_disabled: true
            nodeSelector: {}
            tolerations: []
        image:
          pullPolicy: Always
          repository: percona/percona-xtradb-cluster
          tag: 5.7.19
        logTail: true
        metricsExporter:
          argsOverrides: []
          commandOverrides: []
          enabled: true
          tag: v0.11.0
        mysqlDatabase: central_ledger
        mysqlPassword: KWvT8pzuBQ63Qp
        mysqlRootPassword: rUxHfAd7en
        mysqlUser: central_ledger
        nameOverride: centralledger-mysql
        nodeSelector: {}
        persistence:
          accessMode: ReadWriteOnce
          enabled: true
          size: 8Gi
          storageClass: slow
        podAnnotations: {}
        podDisruptionBudget:
          enabled: false
          maxUnavailable: 1
        prometheus:
          operator:
            enabled: false
            prometheusRule:
              enabled: true
              labels: {}
            serviceMonitor:
              interval: 10s
        replicas: 1
        service:
          externalIPs: []
          percona:
            headless: false
          port: 3306
          type: ClusterIP
        ssl:
          enabled: false
          secret: mysql-ssl-certs
        tolerations: []
      nameOverride: centralledger
    centralsettlement:
      config:
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: KWvT8pzuBQ63Qp
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        hub_participant:
          id: 1
          name: hub
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
      global:
        config:
          affinity: {}
          db_password: KWvT8pzuBQ63Qp
          forensicloggingsidecar_disabled: true
          nodeSelector: {}
          tolerations: []
      image:
        pullPolicy: Always
        repository: mojaloop/central-settlement
        tag: v8.6.0
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath: /settlements
        hosts:
          admin: interop-switch.mbox-dev.io
          api: interop-switch.mbox-dev.io
      init:
        enabled: true
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
      livenessProbe:
        enabled: false
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15
      readinessProbe:
        enabled: false
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3007
              name: http-api
        ports:
          api:
            externalPort: 80
            internalPort: 3007
            name: http-api
        type: ClusterIP
    global:
      config:
        affinity: {}
        db_password: KWvT8pzuBQ63Qp
        forensicloggingsidecar_disabled: true
        nodeSelector: {}
        tolerations: []
  emailnotifier:
    config:
      PORT: 3081
      email:
        ciphers: SSLv3
        host: smtp.gmail.com
        pass: pass
        port: 587
        user: user@gmail.com
      hub_participant:
        name: hub
      kafka_host: $release_name-kafka
      kafka_port: 9092
    enabled: false
    image:
      pullPolicy: Always
      repository: mojaloop/email-notifier
      tag: v8.7.0
    ingress:
      enabled: true
      externalPath: /
      hosts:
        api: emailnotifier.mbox-dev.io
    init:
      enabled: true
      kafka:
        command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
          do echo waiting for Kafka; sleep 2; done;
        env: {}
        name: wait-for-kafka
        pullPolicy: Always
        repository: solsson/kafka
        tag: latest
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 30
      periodSeconds: 15
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 30
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 3081
            name: email-notifier
      externalPort: 80
      internalPort: 3081
      name: email-notifier
      type: ClusterIP
  global:
    config:
      affinity: {}
      db_password: KWvT8pzuBQ63Qp
      forensicloggingsidecar_disabled: true
      nodeSelector: {}
      tolerations: []
  ml-api-adapter:
    global:
      config:
        affinity: {}
        db_password: KWvT8pzuBQ63Qp
        forensicloggingsidecar_disabled: true
        nodeSelector: {}
        tolerations: []
    ml-api-adapter-handler-notification:
      config:
        central_services_host: $release_name-centralledger-service
        central_services_port: 80
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        event_trace_state_enabled: true
        event_trace_vendor: mojaloop
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_events_locally_enabled: false
        log_level: info
        max_callback_time_lag_dilation_milliseconds: 100
        max_fulfil_timeout_duration_seconds: 240
        security:
          callback:
            rejectUnauthorized: true
        send_transfer_confirmation_to_payee: true
      enabled: true
      global:
        config:
          affinity: {}
          db_password: KWvT8pzuBQ63Qp
          forensicloggingsidecar_disabled: true
          nodeSelector: {}
          tolerations: []
      image:
        command: '["node", "src/handlers/index.js", "handler", "--notification"]'
        pullPolicy: Always
        repository: mojaloop/ml-api-adapter
        tag: v8.7.2
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath: /
        hosts:
          api: ml-api-adapter-handler-notification.mbox-dev.io
      init:
        enabled: true
        image:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 90
        periodSeconds: 15
      metrics:
        config:
          defaultLabels:
            serviceName: ml-handler-notification
          prefix: moja_
          timeout: 5000
        enabled: true
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 120
        periodSeconds: 15
      replicaCount: 1
      resources: {}
      service:
        externalPort: 80
        internalPort: 3000
        type: ClusterIP
      sidecar:
        config:
          event_logger_grpc_host: localhost
          event_logger_grpc_port: 50051
          log_level: info
        enabled: true
        image:
          command: '["npm", "run", "start"]'
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.7.1
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 90
          periodSeconds: 15
        readinessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 120
          periodSeconds: 15
        service:
          internalPort: 4001
    ml-api-adapter-service:
      config:
        central_services_host: $release_name-centralledger-service
        central_services_port: 80
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        event_trace_state_enabled: true
        event_trace_vendor: mojaloop
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_events_locally_enabled: false
        log_level: info
        max_callback_time_lag_dilation_milliseconds: 100
        max_fulfil_timeout_duration_seconds: 240
        security:
          callback:
            rejectUnauthorized: true
      enabled: true
      global:
        config:
          affinity: {}
          db_password: KWvT8pzuBQ63Qp
          forensicloggingsidecar_disabled: true
          nodeSelector: {}
          tolerations: []
      image:
        command: '["node", "src/api/index.js"]'
        pullPolicy: Always
        repository: mojaloop/ml-api-adapter
        tag: v8.7.2
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath: /
        hosts:
          api: ml-api-adapter.mbox-dev.io
      init:
        enabled: true
        image:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 90
        periodSeconds: 15
      metrics:
        config:
          defaultLabels:
            serviceName: ml-service
          prefix: moja_
          timeout: 5000
        enabled: true
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 120
        periodSeconds: 15
      replicaCount: 1
      resources: {}
      service:
        externalPort: 80
        internalPort: 3000
        type: ClusterIP
      sidecar:
        config:
          event_logger_grpc_host: localhost
          event_logger_grpc_port: 50051
          log_level: info
        enabled: true
        image:
          command: '["npm", "run", "start"]'
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.7.1
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 90
          periodSeconds: 15
        readinessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 120
          periodSeconds: 15
        service:
          internalPort: 4001
  mojaloop-bulk:
    bulk-api-adapter:
      bulk-api-adapter-handler-notification:
        config:
          central_services_host: $release_name-centralledger-service
          central_services_port: 80
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_level: info
          objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
          security:
            callback:
              rejectUnauthorized: true
        enabled: true
        image:
          command: '["node", "src/handlers/index.js", "handler", "--notification"]'
          pullPolicy: Always
          repository: mojaloop/bulk-api-adapter
          tag: v8.7.0-snapshot
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: false
          externalPath: /
          hosts:
            api: bulk-api-adapter-notification.local
        init:
          enabled: true
          image:
            command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
              do echo waiting for Kafka; sleep 2; done;
            env: {}
            name: wait-for-kafka
            pullPolicy: Always
            repository: solsson/kafka
            tag: latest
          mongodb:
            command: mongo $mongouri --eval "db.adminCommand('ping')"
            name: wait-for-mongodb
            pullPolicy: Always
            repository: bitnami/mongodb
            tag: latest
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 90
          periodSeconds: 15
        metrics:
          config:
            defaultLabels:
              serviceName: bulk-handler-notification
            prefix: moja_
            timeout: 5000
          enabled: true
        readinessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 120
          periodSeconds: 15
        replicaCount: 1
        resources: {}
        service:
          externalPort: 80
          internalPort: 8088
          type: ClusterIP
      bulk-api-adapter-service:
        config:
          central_services_host: $release_name-centralledger-service
          central_services_port: 80
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_level: info
          objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
          security:
            callback:
              rejectUnauthorized: true
        enabled: true
        image:
          command: '["node", "src/api/index.js"]'
          pullPolicy: Always
          repository: mojaloop/bulk-api-adapter
          tag: v8.7.0-snapshot
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: true
          externalPath: /
          hosts:
            api: bulk-api-adapter.local
        init:
          enabled: true
          image:
            command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
              do echo waiting for Kafka; sleep 2; done;
            env: {}
            name: wait-for-kafka
            pullPolicy: Always
            repository: solsson/kafka
            tag: latest
          mongodb:
            command: mongo $mongouri --eval "db.adminCommand('ping')"
            name: wait-for-mongodb
            pullPolicy: Always
            repository: bitnami/mongodb
            tag: latest
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 90
          periodSeconds: 15
        metrics:
          config:
            defaultLabels:
              serviceName: bulk-service
            prefix: moja_
            timeout: 5000
          enabled: true
        readinessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 120
          periodSeconds: 15
        replicaCount: 1
        resources: {}
        service:
          externalPort: 80
          internalPort: 8088
          type: ClusterIP
    bulk-centralledger:
      cl-handler-bulk-transfer-fulfil:
        config:
          db_acquire_timeout_millis: 30000
          db_connection_pool_max: 30
          db_connection_pool_min: 10
          db_create_retry_interval_millis: 200
          db_create_timeout_millis: 30000
          db_database: central_ledger
          db_debug: false
          db_destroy_timeout_millis: 5000
          db_driver: mysql
          db_host: $release_name-centralledger-mysql
          db_idle_timeout_millis: 30000
          db_password: oyMxgZChuu
          db_port: 3306
          db_reap_interval_millis: 1000
          db_type: mysql
          db_user: central_ledger
          error_handling:
            include_cause_extension: false
            truncate_extensions: true
          forensicloggingsidecar_disabled: true
          forensicloggingsidecar_host: forensicloggingsidecar-ledger
          forensicloggingsidecar_port: 5678
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_level: info
          objstore_disabled: false
          objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
        containers:
          api:
            image:
              command: '["node", "src/handlers/index.js", "handler", "--bulkfulfil"]'
              pullPolicy: Always
              repository: mojaloop/central-ledger
              tag: v8.7.1
            livenessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            readinessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            service:
              ports:
                api:
                  externalPort: 80
                  internalPort: 3001
                  name: http-api
        enabled: true
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: false
          externalPath:
            api: /
          hosts:
            api: central-ledger-transfer-bulkfulfil.local
          type: http
        init:
          enabled: true
          kafka:
            command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
              do echo waiting for Kafka; sleep 2; done;
            env: {}
            name: wait-for-kafka
            pullPolicy: Always
            repository: solsson/kafka
            tag: latest
          mongodb:
            command: mongo $mongouri --eval "db.adminCommand('ping')"
            name: wait-for-mongodb
            pullPolicy: Always
            repository: bitnami/mongodb
            tag: latest
          mysql:
            command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
              -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
              && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
              fi; do echo waiting for MySQL; sleep 2; done;
            name: wait-for-mysql
            pullPolicy: Always
            repository: mysql
            tag: latest
          psql:
            name: wait-for-postgres
            pullPolicy: Always
            repository: bowerswilkins/awaitpostgres
            tag: latest
        metrics:
          config:
            defaultLabels:
              serviceName: central-handler-bulkfulfil
            prefix: moja_
            timeout: 5000
          enabled: true
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 3001
                name: http-api
          type: ClusterIP
      cl-handler-bulk-transfer-prepare:
        config:
          db_acquire_timeout_millis: 30000
          db_connection_pool_max: 30
          db_connection_pool_min: 10
          db_create_retry_interval_millis: 200
          db_create_timeout_millis: 30000
          db_database: central_ledger
          db_debug: false
          db_destroy_timeout_millis: 5000
          db_driver: mysql
          db_host: $release_name-centralledger-mysql
          db_idle_timeout_millis: 30000
          db_password: oyMxgZChuu
          db_port: 3306
          db_reap_interval_millis: 1000
          db_type: mysql
          db_user: central_ledger
          error_handling:
            include_cause_extension: false
            truncate_extensions: true
          forensicloggingsidecar_disabled: true
          forensicloggingsidecar_host: forensicloggingsidecar-ledger
          forensicloggingsidecar_port: 5678
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_level: info
          objstore_disabled: false
          objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
        containers:
          api:
            image:
              command: '["node", "src/handlers/index.js", "handler", "--bulkprepare"]'
              pullPolicy: Always
              repository: mojaloop/central-ledger
              tag: v8.7.1
            livenessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            readinessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            service:
              ports:
                api:
                  externalPort: 80
                  internalPort: 3001
                  name: http-api
        enabled: true
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: false
          externalPath:
            api: /
          hosts:
            api: central-ledger-transfer-bulkprepare.local
          type: http
        init:
          enabled: true
          kafka:
            command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
              do echo waiting for Kafka; sleep 2; done;
            env: {}
            name: wait-for-kafka
            pullPolicy: Always
            repository: solsson/kafka
            tag: latest
          mongodb:
            command: mongo $mongouri --eval "db.adminCommand('ping')"
            name: wait-for-mongodb
            pullPolicy: Always
            repository: bitnami/mongodb
            tag: latest
          mysql:
            command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
              -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
              && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
              fi; do echo waiting for MySQL; sleep 2; done;
            name: wait-for-mysql
            pullPolicy: Always
            repository: mysql
            tag: latest
          psql:
            name: wait-for-postgres
            pullPolicy: Always
            repository: bowerswilkins/awaitpostgres
            tag: latest
        metrics:
          config:
            defaultLabels:
              serviceName: central-handler-bulkprepare
            prefix: moja_
            timeout: 5000
          enabled: true
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 3001
                name: http-api
          type: ClusterIP
      cl-handler-bulk-transfer-processing:
        config:
          db_acquire_timeout_millis: 30000
          db_connection_pool_max: 30
          db_connection_pool_min: 10
          db_create_retry_interval_millis: 200
          db_create_timeout_millis: 30000
          db_database: central_ledger
          db_debug: false
          db_destroy_timeout_millis: 5000
          db_driver: mysql
          db_host: $release_name-centralledger-mysql
          db_idle_timeout_millis: 30000
          db_password: oyMxgZChuu
          db_port: 3306
          db_reap_interval_millis: 1000
          db_type: mysql
          db_user: central_ledger
          error_handling:
            include_cause_extension: false
            truncate_extensions: true
          forensicloggingsidecar_disabled: true
          forensicloggingsidecar_host: forensicloggingsidecar-ledger
          forensicloggingsidecar_port: 5678
          kafka_host: $release_name-kafka
          kafka_port: 9092
          log_level: info
          objstore_disabled: false
          objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
        containers:
          api:
            image:
              command: '["node", "src/handlers/index.js", "handler", "--bulkprocessing"]'
              pullPolicy: Always
              repository: mojaloop/central-ledger
              tag: v8.7.1
            livenessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            readinessProbe:
              enabled: true
              httpGet:
                path: /health
              initialDelaySeconds: 60
              periodSeconds: 15
            service:
              ports:
                api:
                  externalPort: 80
                  internalPort: 3001
                  name: http-api
        enabled: true
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
          enabled: false
          externalPath:
            api: /
          hosts:
            api: central-ledger-transfer-bulkprocessing.local
          type: http
        init:
          enabled: true
          kafka:
            command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
              do echo waiting for Kafka; sleep 2; done;
            env: {}
            name: wait-for-kafka
            pullPolicy: Always
            repository: solsson/kafka
            tag: latest
          mongodb:
            command: mongo $mongouri --eval "db.adminCommand('ping')"
            name: wait-for-mongodb
            pullPolicy: Always
            repository: bitnami/mongodb
            tag: latest
          mysql:
            command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
              -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
              && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
              fi; do echo waiting for MySQL; sleep 2; done;
            name: wait-for-mysql
            pullPolicy: Always
            repository: mysql
            tag: latest
          psql:
            name: wait-for-postgres
            pullPolicy: Always
            repository: bowerswilkins/awaitpostgres
            tag: latest
        metrics:
          config:
            defaultLabels:
              serviceName: central-handler-bulkprocessing
            prefix: moja_
            timeout: 5000
          enabled: true
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 3001
                name: http-api
          type: ClusterIP
    enabled: false
    mongodb:
      additionalLabels: {}
      affinity: {}
      clusterDomain: cluster.local
      enabled: true
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/mongodb
        tag: 4.0.3
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      metrics:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: forekshub/percona-mongodb-exporter
          tag: latest
        podAnnotations:
          prometheus.io/port: "9216"
          prometheus.io/scrape: "true"
        serviceMonitor:
          additionalLabels: {}
          alerting:
            rules: {}
          enabled: false
      mongodbDatabase: mlos
      mongodbEnableIPv6: true
      mongodbExtraFlags: []
      mongodbPassword: password
      mongodbRootPassword: adminpass
      mongodbUsername: mojaloop
      nameOverride: centralledger-obj
      nodeSelector: {}
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: false
        size: 8Gi
      podAnnotations: {}
      podLabels: {}
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replicaSet:
        enabled: false
        name: rs0
        pdb:
          minAvailable:
            arbiter: 1
            primary: 1
            secondary: 1
        replicas:
          arbiter: 1
          secondary: 1
        useHostnames: true
      resources: {}
      securityContext:
        enabled: true
        fsGroup: 1001
        runAsUser: 1001
      service:
        annotations: {}
        port: 27017
        type: ClusterIP
      tolerations: []
      usePassword: true
  quoting-service:
    config:
      db_acquire_timeout_millis: 30000
      db_connection_pool_max: 30
      db_connection_pool_min: 10
      db_create_retry_interval_millis: 200
      db_create_timeout_millis: 30000
      db_database: central_ledger
      db_debug: false
      db_destroy_timeout_millis: 5000
      db_driver: mysql
      db_host: $release_name-centralledger-mysql
      db_idle_timeout_millis: 30000
      db_password: KWvT8pzuBQ63Qp
      db_port: 3306
      db_reap_interval_millis: 1000
      db_type: mysql
      db_user: central_ledger
      error_handling:
        include_cause_extension: false
        truncate_extensions: true
      event_trace_state_enabled: true
      event_trace_vendor: mojaloop
      kafka_host: $release_name-kafka
      kafka_port: 9092
      log_level: info
      simple_routing_mode_enabled: true
    global:
      config:
        affinity: {}
        db_password: KWvT8pzuBQ63Qp
        forensicloggingsidecar_disabled: true
        nodeSelector: {}
        tolerations: []
    image:
      pullPolicy: Always
      repository: mojaloop/quoting-service
      tag: v8.7.0.9-snapshot
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: quoting-service.mbox-dev.io
    init:
      enabled: true
      mysql:
        command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
          -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
          && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
          fi; do echo waiting for MySQL; sleep 2; done;
        name: wait-for-mysql
        pullPolicy: Always
        repository: mysql
        tag: latest
    livenessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    readinessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    rules: []
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 3002
            name: http-api
      ports:
        api:
          externalPort: 80
          internalPort: 3002
          name: http-api
      type: ClusterIP
    sidecar:
      config:
        event_logger_grpc_host: localhost
        event_logger_grpc_port: 50051
        log_level: info
      enabled: true
      image:
        command: '["npm", "run", "start"]'
        pullPolicy: Always
        repository: mojaloop/event-sidecar
        tag: v8.7.1
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 90
        periodSeconds: 15
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 120
        periodSeconds: 15
      service:
        internalPort: 4001
  simulator:
    affinity: {}
    config:
      LOG_LEVEL: info
      MOCK_JWS_SIGNATURE: abcJjvNrkyK2KBieDUbGfhaBUn75aDUATNF4joqA8OLs4QgSD7i6EO8BIdy6Crph3LnXnTM20Ai1Z6nt0zliS_qPPLU9_vi6qLb15FOkl64DQs9hnfoGeo2tcjZJ88gm19uLY_s27AJqC1GH1B8E2emLrwQMDMikwQcYvXoyLrL7LL3CjaLMKdzR7KTcQi1tCK4sNg0noIQLpV3eA61kess
      PARTIES_SERVICE_ENDPOINT: http://$release_name-account-lookup-service
      QUOTES_SERVICE_ENDPOINT: http://$release_name-quoting-service
      TRANSFERS_CONDITION: HOr22-H3AfTDHrSkPjJtVPRdKouuMkDXTR4ejlQa8Ks
      TRANSFERS_FULFIL_RESPONSE_DISABLED: false
      TRANSFERS_FULFILMENT: XoSz1cL0tljJSCp_VtIYmPNw-zFUgGfbUqf69AagUzY
      TRANSFERS_ILPPACKET: AQAAAAAAAADIEHByaXZhdGUucGF5ZWVmc3CCAiB7InRyYW5zYWN0aW9uSWQiOiIyZGY3NzRlMi1mMWRiLTRmZjctYTQ5NS0yZGRkMzdhZjdjMmMiLCJxdW90ZUlkIjoiMDNhNjA1NTAtNmYyZi00NTU2LThlMDQtMDcwM2UzOWI4N2ZmIiwicGF5ZWUiOnsicGFydHlJZEluZm8iOnsicGFydHlJZFR5cGUiOiJNU0lTRE4iLCJwYXJ0eUlkZW50aWZpZXIiOiIyNzcxMzgwMzkxMyIsImZzcElkIjoicGF5ZWVmc3AifSwicGVyc29uYWxJbmZvIjp7ImNvbXBsZXhOYW1lIjp7fX19LCJwYXllciI6eyJwYXJ0eUlkSW5mbyI6eyJwYXJ0eUlkVHlwZSI6Ik1TSVNETiIsInBhcnR5SWRlbnRpZmllciI6IjI3NzEzODAzOTExIiwiZnNwSWQiOiJwYXllcmZzcCJ9LCJwZXJzb25hbEluZm8iOnsiY29tcGxleE5hbWUiOnt9fX0sImFtb3VudCI6eyJjdXJyZW5jeSI6IlVTRCIsImFtb3VudCI6IjIwMCJ9LCJ0cmFuc2FjdGlvblR5cGUiOnsic2NlbmFyaW8iOiJERVBPU0lUIiwic3ViU2NlbmFyaW8iOiJERVBPU0lUIiwiaW5pdGlhdG9yIjoiUEFZRVIiLCJpbml0aWF0b3JUeXBlIjoiQ09OU1VNRVIiLCJyZWZ1bmRJbmZvIjp7fX19
      TRANSFERS_SERVICE_ENDPOINT: http://$release_name-ml-api-adapter-service
      event_trace_state_enabled: false
      event_trace_vendor: mojasim
    global:
      config:
        affinity: {}
        db_password: KWvT8pzuBQ63Qp
        forensicloggingsidecar_disabled: true
        nodeSelector: {}
        tolerations: []
    image:
      pullPolicy: Always
      repository: mojaloop/simulator
      tag: v8.7.1
    imagePullSecrets: []
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      hosts:
      - moja-simulator.mbox-dev.io
      path: /
      tls: []
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
        port: 8444
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 15
    metrics:
      defaultLabels:
        serviceName: simulator
      enabled: true
      prefix: moja_
      timeout: 5000
    nodeSelector: {}
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
        port: 8444
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      port: 80
      targetPort: http
      type: ClusterIP
    tolerations: []
  transaction-requests-service:
    config:
      central_services_host: $release_name-centralledger-service
      central_services_port: 80
      log_level: info
    global:
      config:
        affinity: {}
        db_password: KWvT8pzuBQ63Qp
        forensicloggingsidecar_disabled: true
        nodeSelector: {}
        tolerations: []
    image:
      pullPolicy: Always
      repository: mojaloop/transaction-requests-service
      tag: v8.7.0
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: transaction-request-service.local
    init:
      enabled: false
    livenessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    metrics:
      config:
        defaultLabels:
          serviceName: transaction-requests
        prefix: moja_
        timeout: 5000
      enabled: false
    readinessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 3002
            name: http-api
      ports:
        api:
          externalPort: 80
          internalPort: 3002
          name: http-api
      type: ClusterIP

