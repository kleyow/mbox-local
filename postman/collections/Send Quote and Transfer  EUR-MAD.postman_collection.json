{
	"info": {
		"_postman_id": "ed34e368-5c0c-47f9-970f-cf294de73b46",
		"name": "Send Quote and Transfer  EUR-MAD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Send Quote_SEND EUR",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
						"exec": [
							"var uuid = require('uuid');",
							"var generatedUUID = uuid.v4();",
							"",
							"pm.environment.set('quoteId', generatedUUID);",
							"generatedUUID = uuid.v4();",
							"pm.environment.set('transactionId', generatedUUID);",
							"pm.environment.set('quoteDate', (new Date()).toUTCString());",
							"pm.environment.set('transferAmount', 100);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
						"exec": [
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"//Check the request that Switch forwards to payeefsp",
							"setTimeout(function () {",
							"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/dfspeur/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
							"          if(response.responseSize !== 0) {",
							"              console.log('dfspeur  request response:')",
							"              ",
							"              ",
							"              //Check the Headers",
							"              var headers = response.json().headers;",
							"              ",
							"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
							"                    pm.expect(headers['fspiop-source']).to.eql('dfsp1');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
							"                    pm.expect(headers['fspiop-destination']).to.eql('dfspeur');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
							"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
							"                });",
							"                ",
							"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
							"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
							"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
							"                });",
							"                ",
							"          } else {",
							"              pm.test(\"Quote FAILED\", function () {",
							"                throw new Error('Did not receive request on payee side');",
							"              });",
							"              postman.setNextRequest(null)",
							"          }",
							"   });",
							"}, 1100)",
							"",
							"//Check Data on payer side",
							"setTimeout(function () {",
							"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/dfsp1/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
							"      if(response.responseSize !== 0) {",
							"          console.log('dfsp1callback response:')",
							"          //Checking headers",
							"            var headers = response.json().headers;",
							"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
							"                pm.expect(headers['fspiop-source']).to.eql('dfspeur');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
							"                pm.expect(headers['fspiop-destination']).to.eql('dfsp1');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
							"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp accept is empty\", function () {",
							"                pm.expect(headers['accept']).to.eql(undefined);",
							"            });",
							"            ",
							"            //Validate protected header inside Signature",
							"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
							"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
							"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
							"            ",
							"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
							"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
							"            });",
							"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
							"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
							"            });",
							"            ",
							"",
							"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
							"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
							"            });",
							"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
							"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('dfsp1');",
							"            });",
							"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
							"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('dfsp1');",
							"            });",
							"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
							"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
							"            });",
							"           ",
							"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
							"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
							"            });",
							"            ",
							"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
							"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
							"            });",
							"            ",
							"            var jsonData = response.json().data;",
							"            ",
							"          pm.test(\"Response fees is returned\", function () {",
							"                pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
							"                ",
							"            });",
							"            pm.test(\"Response Commission is returned\", function () {",
							"                pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
							"                ",
							"            });",
							"            ",
							"            pm.test(\"Response ilpPacket is not undefined\", function () {",
							"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
							"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
							"            });",
							"       ",
							"           pm.test(\"Response condition is not undefined\", function () {",
							"               pm.expect(jsonData.condition).not.equal(undefined);",
							"               pm.environment.set(\"condition\", jsonData.condition);",
							"           });",
							"      } else {",
							"          pm.test(\"Quote FAILED\", function () {",
							"            throw new Error('Did not receive response');",
							"           });",
							"",
							"      }",
							"       ",
							"   });",
							"}, 1000)",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TESTFSP1_BEARER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.interoperability.quotes+json"
					},
					{
						"key": "Content-Type",
						"value": "application/vnd.interoperability.quotes+json;version=1.0"
					},
					{
						"key": "Date",
						"value": "{{quoteDate}}"
					},
					{
						"key": "FSPIOP-Source",
						"value": "dfsp1"
					},
					{
						"key": "FSPIOP-Destination",
						"value": "dfspeur"
					},
					{
						"key": "FSPIOP-Signature",
						"type": "text",
						"value": "{{fspiop-signature}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"dfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"dfspeur\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
				},
				"url": {
					"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
					"host": [
						"{{HOST_QUOTING_SERVICE}}"
					],
					"path": [
						"quotes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Quote_SEND MAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "43457448-90ed-4bec-ad9f-cc0f133e87d4",
						"exec": [
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"//Check the request that Switch forwards to payeefsp",
							"setTimeout(function () {",
							"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/dfsp2/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
							"          if(response.responseSize !== 0) {",
							"              console.log('dfsp2  request response:')",
							"              ",
							"              ",
							"              //Check the Headers",
							"              var headers = response.json().headers;",
							"              ",
							"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
							"                    pm.expect(headers['fspiop-source']).to.eql('dfspmad');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
							"                    pm.expect(headers['fspiop-destination']).to.eql('dfsp2');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
							"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
							"                });",
							"                ",
							"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
							"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
							"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
							"                });",
							"                ",
							"          } else {",
							"              pm.test(\"Quote FAILED\", function () {",
							"                throw new Error('Did not receive request on payee side');",
							"              });",
							"              postman.setNextRequest(null)",
							"          }",
							"   });",
							"}, 1100)",
							"",
							"//Check Data on payer side",
							"setTimeout(function () {",
							"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/dfspmad/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
							"      if(response.responseSize !== 0) {",
							"          console.log('dfspmadcallback response:')",
							"          //Checking headers",
							"            var headers = response.json().headers;",
							"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
							"                pm.expect(headers['fspiop-source']).to.eql('dfsp2');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
							"                pm.expect(headers['fspiop-destination']).to.eql('dfspmad');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
							"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp accept is empty\", function () {",
							"                pm.expect(headers['accept']).to.eql(undefined);",
							"            });",
							"            ",
							"            //Validate protected header inside Signature",
							"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
							"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
							"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
							"            ",
							"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
							"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
							"            });",
							"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
							"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
							"            });",
							"            ",
							"",
							"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
							"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
							"            });",
							"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
							"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('dfspmad');",
							"            });",
							"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
							"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('dfspmad');",
							"            });",
							"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
							"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
							"            });",
							"           ",
							"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
							"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
							"            });",
							"            ",
							"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
							"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
							"            });",
							"            ",
							"            var jsonData = response.json().data;",
							"            ",
							"          pm.test(\"Response fees is returned\", function () {",
							"                pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
							"                ",
							"            });",
							"            pm.test(\"Response Commission is returned\", function () {",
							"                pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
							"                ",
							"            });",
							"            ",
							"            pm.test(\"Response ilpPacket is not undefined\", function () {",
							"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
							"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
							"            });",
							"       ",
							"           pm.test(\"Response condition is not undefined\", function () {",
							"               pm.expect(jsonData.condition).not.equal(undefined);",
							"               pm.environment.set(\"condition\", jsonData.condition);",
							"           });",
							"      } else {",
							"          pm.test(\"Quote FAILED\", function () {",
							"            throw new Error('Did not receive response');",
							"           });",
							"",
							"      }",
							"       ",
							"   });",
							"}, 1000)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "203c2fb3-3453-4a51-a4c5-dba6ccadfa48",
						"exec": [
							"var uuid = require('uuid');",
							"var generatedUUID = uuid.v4();",
							"",
							"pm.environment.set('quoteId', generatedUUID);",
							"generatedUUID = uuid.v4();",
							"pm.environment.set('transactionId', generatedUUID);",
							"pm.environment.set('quoteDate', (new Date()).toUTCString());",
							"pm.environment.set('transferAmount', 100);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TESTFSP1_BEARER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.interoperability.quotes+json"
					},
					{
						"key": "Content-Type",
						"value": "application/vnd.interoperability.quotes+json;version=1.0"
					},
					{
						"key": "Date",
						"value": "{{quoteDate}}"
					},
					{
						"key": "FSPIOP-Source",
						"value": "dfspmad"
					},
					{
						"key": "FSPIOP-Destination",
						"value": "dfsp2"
					},
					{
						"key": "FSPIOP-Signature",
						"type": "text",
						"value": "{{fspiop-signature}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"dfspmad\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"dfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
				},
				"url": {
					"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
					"host": [
						"{{HOST_QUOTING_SERVICE}}"
					],
					"path": [
						"quotes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Transfer EUR",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "900142b0-e4d7-43a4-a751-38202b600661",
						"exec": [
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"//Check the request that Switch forwards to payeefsp",
							"setTimeout(function () {",
							"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/dfspeur/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
							"          if(response.responseSize !== 0) {",
							"              ",
							"              //Check the Headers",
							"              var headers = response.json().headers;",
							"              ",
							"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
							"                    pm.expect(headers['fspiop-source']).to.eql('dfsp1');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
							"                    pm.expect(headers['fspiop-destination']).to.eql('dfspeur');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
							"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
							"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
							"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
							"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
							"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
							"                });",
							"                ",
							"                ",
							"                //Check the data",
							"                var jsonData = response.json().data;",
							"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
							"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
							"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"dfsp1\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
							"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"dfspeur\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
							"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
							"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
							"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
							"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
							"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
							"                });",
							"                ",
							"          } else {",
							"              pm.test(\"Transfer FAILED\", function () {",
							"                throw new Error('Did not receive response');",
							"              });",
							"",
							"          }",
							"   });",
							"}, 1100)",
							"",
							"//Check the callback response that Switch forwards to payerfsp",
							"setTimeout(function () {",
							"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/dfsp1/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
							"          if(response.responseSize !== 0) {",
							"            //Checking headers",
							"            var headers = response.json().headers;",
							"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
							"                pm.expect(headers['fspiop-source']).to.eql('dfspeur');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
							"                pm.expect(headers['fspiop-destination']).to.eql('dfsp1');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
							"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp accept is empty\", function () {",
							"                pm.expect(headers['accept']).to.eql(undefined);",
							"            });",
							"            ",
							"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
							"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
							"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
							"            });",
							"            ",
							"            var jsonData = response.json().data;",
							"            pm.test(\"Response data does not have transferId\", function () {",
							"               pm.expect(jsonData.transferId).to.eql(undefined);",
							"            });",
							"            pm.test(\"Response status is COMMITTED\", function () {",
							"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
							"            });",
							"          } else {",
							"              pm.test(\"Transfer FAILED\", function () {",
							"                throw new Error('Did not receive response');",
							"              });",
							"",
							"          }",
							"   });",
							"}, 1300)",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
						"exec": [
							"var uuid = require('uuid');",
							"var generatedUUID = uuid.v4();",
							"",
							"pm.environment.set('transfer_ID',  pm.variables.get('transactionId'));",
							"pm.environment.set('transferDate', (new Date()).toUTCString());",
							"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
							"pm.environment.set('transferAmount', pm.variables.get('transferAmount'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.interoperability.transfers+json;version=1"
					},
					{
						"key": "Content-Type",
						"value": "application/vnd.interoperability.transfers+json;version=1.0"
					},
					{
						"key": "Date",
						"value": "{{transferDate}}"
					},
					{
						"key": "FSPIOP-Source",
						"value": "{{dfsp1}}"
					},
					{
						"key": "FSPIOP-Destination",
						"value": "{{dfspeur}}"
					},
					{
						"key": "FSPIOP-Signature",
						"type": "text",
						"value": "{{fspiop-signature}}"
					},
					{
						"key": "FSPIOP-URI",
						"type": "text",
						"value": "/transfers"
					},
					{
						"key": "FSPIOP-HTTP-Method",
						"type": "text",
						"value": "POST"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{dfsp1}}\",\n  \"payeeFsp\": \"{{dfspeur}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
				},
				"url": {
					"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
					"host": [
						"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
					],
					"path": [
						"transfers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Transfer MAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "900142b0-e4d7-43a4-a751-38202b600661",
						"exec": [
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"//Check the request that Switch forwards to payeefsp",
							"setTimeout(function () {",
							"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/dfsp2/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
							"          if(response.responseSize !== 0) {",
							"              ",
							"              //Check the Headers",
							"              var headers = response.json().headers;",
							"              ",
							"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
							"                    pm.expect(headers['fspiop-source']).to.eql('dfspmad');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
							"                    pm.expect(headers['fspiop-destination']).to.eql('dfsp2');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
							"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
							"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
							"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
							"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
							"                });",
							"                ",
							"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
							"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
							"                });",
							"                ",
							"                ",
							"                //Check the data",
							"                var jsonData = response.json().data;",
							"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
							"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
							"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"dfspmad\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
							"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"dfsp2\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
							"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
							"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
							"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
							"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
							"                });",
							"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
							"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
							"                });",
							"                ",
							"          } else {",
							"              pm.test(\"Transfer FAILED\", function () {",
							"                throw new Error('Did not receive response');",
							"              });",
							"",
							"          }",
							"   });",
							"}, 1100)",
							"",
							"//Check the callback response that Switch forwards to payerfsp",
							"setTimeout(function () {",
							"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/dfspmad/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
							"          if(response.responseSize !== 0) {",
							"            //Checking headers",
							"            var headers = response.json().headers;",
							"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
							"                pm.expect(headers['fspiop-source']).to.eql('dfsp2');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
							"                pm.expect(headers['fspiop-destination']).to.eql('dfspmad');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
							"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp accept is empty\", function () {",
							"                pm.expect(headers['accept']).to.eql(undefined);",
							"            });",
							"            ",
							"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
							"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
							"            });",
							"            ",
							"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
							"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
							"            });",
							"            ",
							"            var jsonData = response.json().data;",
							"            pm.test(\"Response data does not have transferId\", function () {",
							"               pm.expect(jsonData.transferId).to.eql(undefined);",
							"            });",
							"            pm.test(\"Response status is COMMITTED\", function () {",
							"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
							"            });",
							"          } else {",
							"              pm.test(\"Transfer FAILED\", function () {",
							"                throw new Error('Did not receive response');",
							"              });",
							"",
							"          }",
							"   });",
							"}, 1300)",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
						"exec": [
							"var uuid = require('uuid');",
							"var generatedUUID = uuid.v4();",
							"",
							"pm.environment.set('transfer_ID',  pm.variables.get('transactionId'));",
							"pm.environment.set('transferDate', (new Date()).toUTCString());",
							"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
							"pm.environment.set('transferAmount', pm.variables.get('transferAmount'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.interoperability.transfers+json;version=1"
					},
					{
						"key": "Content-Type",
						"value": "application/vnd.interoperability.transfers+json;version=1.0"
					},
					{
						"key": "Date",
						"value": "{{transferDate}}"
					},
					{
						"key": "FSPIOP-Source",
						"value": "{{dfspmad}}"
					},
					{
						"key": "FSPIOP-Destination",
						"value": "{{dfsp2}}"
					},
					{
						"key": "FSPIOP-Signature",
						"type": "text",
						"value": "{{fspiop-signature}}"
					},
					{
						"key": "FSPIOP-URI",
						"type": "text",
						"value": "/transfers"
					},
					{
						"key": "FSPIOP-HTTP-Method",
						"type": "text",
						"value": "POST"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{dfspmad}}\",\n  \"payeeFsp\": \"{{dfsp2}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
				},
				"url": {
					"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
					"host": [
						"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
					],
					"path": [
						"transfers"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b6fbe884-b3e8-484f-bdbb-6f740bf8a6bd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f5282067-d8f4-4256-9b6c-a0c74394ae55",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}